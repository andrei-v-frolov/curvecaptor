#!/usr/bin/wish

# Initialization
set file [lindex $argv 0]
catch {image delete curves}
image create photo curves -file $file
set device [file rootname [file tail $file]]

wm title . "Curve Captor -- $file"
wm iconname . "lprt"


# Curve parameters
set val(Vp) 0; set incr(Vp) 100.0; set units(Vp) "V"
set val(Vg) 0; set incr(Vg)  -2.5; set units(Vg) "V"
set val(Ip) 0; set incr(Ip)  10.0; set units(Ip) "mA"
set val(Ig) 0; set incr(Ig)   1.0; set units(Ig) "mA"

set type 3; set format {Vp Ip Vg}
set param Vg; set axis 0; set markstyle "data"

# Step parameter value
proc step {p} {
	global val incr
	
	set val($p) [expr $val($p)+$incr($p)]
}

# Return current curve parameter tag
proc ctag {} {
	global param val axis
	
	set t "$param=$val($param)"
	if $axis then { step $param }
	return $t
}

# Draw current curve mark
proc draw {c x y} {
	global markstyle
	
	switch $markstyle {
		"tick(v)" {
			$c create polygon\
				$x $y\
				[expr $x-4] [expr $y-13]\
				[expr $x+5] [expr $y-13]\
				$x $y\
				[expr $x-6] $y\
				[expr $x+7] $y\
			-width 1 -outline red
		}
		"tick(^)" {
			$c create polygon\
				$x $y\
				[expr $x-4] [expr $y+13]\
				[expr $x+5] [expr $y+13]\
				$x $y\
				[expr $x-6] $y\
				[expr $x+7] $y\
			-width 1 -outline red
		}
		"tick(<)" {
			$c create polygon\
				$x $y\
				[expr $x+13] [expr $y-4]\
				[expr $x+13] [expr $y+5]\
				$x $y\
				$x [expr $y-6]\
				$x [expr $y+7]\
			-width 1 -outline red
		}
		"tick(>)" {
			$c create polygon\
				$x $y\
				[expr $x-13] [expr $y-4]\
				[expr $x-13] [expr $y+5]\
				$x $y\
				$x [expr $y-6]\
				$x [expr $y+7]\
			-width 1 -outline red
		}
		default {
			$c create line\
				$x $y $x [expr $y+7]\
				$x $y [expr $x+7] $y\
				$x $y $x [expr $y-6]\
				$x $y [expr $x-6] $y\
			-width 1
		}
	}
}


# Toolbar
set t .tools
frame $t -borderwidth 3 -relief raised

label $t.active -foreground red
label $t.plabel; label $t.units; label $t.at -text "@";
entry $t.label -textvariable device -width 6 -justify left -font {courier 18 bold}
entry $t.param -width 6 -justify left; entry $t.pincr -width 6 -justify right
button $t.incr -text "increment" -command { step $param } -padx 0 -pady 0 -relief flat

# Setup curve to be traced
proc tracing {f p a} {
	global t format param axis units
	
	set format $f; set param $p; set axis $a;
	
	$t.plabel configure -text "    $p ="
	$t.param configure -textvariable val($p)
	$t.pincr configure -textvariable incr($p)
	$t.units configure -text "\[$units($p)\]"
}

set m $t.curve.menu
menubutton $t.curve -menu $m -textvariable curve -width 13 -direction below -indicatoron yes -borderwidth 2 -relief sunk
menu $m -tearoff 0

$m add cascade -menu $m.type -label "Vacuum tube type"
$m add separator
$m add command -label "Plate Characteristics: Vp axis" -command {
	set curve "Vp axis"; set markstyle "tick(v)"; tracing {Vp Ip Vg} Vp 1
}
$m add command -label "Plate Characteristics: Ip axis" -command {
	set curve "Ip axis"; set markstyle "tick(<)"; tracing {Vp Ip Vg} Ip 1
}
$m add command -label "Plate Characteristics Curve" -command {
	set curve "Plate curve"; set markstyle "data"; tracing {Vp Ip Vg} Vg 0
}
$m add separator
$m add command -label "Grid Characteristics: Vp axis" -command {
	set curve "Vp axis"; set markstyle "tick(v)"; tracing {Vp Ig Vg} Vp 1
}
$m add command -label "Grid Characteristics: Ig axis" -command {
	set curve "Ig axis"; set markstyle "tick(<)"; tracing {Vp Ig Vg} Ig 1
}
$m add command -label "Grid Characteristics Curve" -command {
	set curve "Grid curve"; set markstyle "data"; tracing {Vp Ig Vg} Vg 0
}
$m add separator
$m add command -label "Transfer Characteristics: Vg axis" -command {
	set curve "Vg axis"; set markstyle "tick(v)"; tracing {Vg Ip Vp} Vg 1
}
$m add command -label "Transfer Characteristics: Ip axis" -command {
	set curve "Ip axis"; set markstyle "tick(<)"; tracing {Vg Ip Vp} Ip 1
}
$m add command -label "Transfer Characteristics Curve" -command {
	set curve "Transfer curve"; set markstyle "data"; tracing {Vg Ip Vp} Vp 0
}
$m invoke 2

menu $m.type -tearoff 0
$m.type add radiobutton -label "Diode" -variable type -value 2 -command {
	foreach i {2 3 4 6 7 8 10 11 12} { $m entryconfigure $i -state normal }
	foreach i {6 7 8 10 11 12} { $m entryconfigure $i -state disabled }
}
$m.type add radiobutton -label "Triode" -variable type -value 3 -command {
	foreach i {2 3 4 6 7 8 10 11 12} { $m entryconfigure $i -state normal }
}
$m.type invoke 1


pack $t.label $t.curve $t.plabel $t.param $t.at $t.pincr $t.units $t.incr -side left -expand no -pady 4
pack $t.active -side right -expand no -pady 4
pack $t -side top -fill x


# Curve tracer canvas
set c .canvas
canvas $c -width [image width curves] -height [image height curves]
$c create image 0 0 -anchor nw -image curves
pack $c -side top -padx .5m -pady .5m

bind $c <1> "mark $c %x %y"
bind $c <B1-Motion> "move $c %x %y"

$c bind X <2> "select $c %x %y"
$c bind X <B2-Motion> "move $c %x %y"

bind . <Left> "nudge $c -1 0"
bind . <Right> "nudge $c 1 0"
bind . <Up> "nudge $c 0 -1"
bind . <Down> "nudge $c 0 1"
bind . <KP_Left> "nudge $c -1 0"
bind . <KP_Right> "nudge $c 1 0"
bind . <KP_Up> "nudge $c 0 -1"
bind . <KP_Down> "nudge $c 0 1"
bind . <KP_Home> "nudge $c -1 -1"
bind . <KP_Page_Up> "nudge $c 1 -1"
bind . <KP_End> "nudge $c -1 1"
bind . <KP_Page_Down> "nudge $c 1 1"

# Activate tag
proc activate {c t} {
	$c itemconf active -fill red; $c dtag active
	$c addtag active withtag $t; $c itemconf active -fill orange
	$c raise active
	
	.tools.active configure -text "Active marker: [lindex [$c gettags $t] 0] "
}

# New cross-hairs mark
proc mark {c x y} {
	global X Y; set X $x; set Y $y
	
	set t [draw $c $x $y]
	$c addtag [ctag] withtag $t
	$c addtag X withtag $t
	activate $c $t
}

# Select mark for moving
proc select {c x y} {
	global X Y; set X $x; set Y $y
	
	activate $c current
}

# Move active mark
proc move {c x y} {
	global X Y; nudge $c [expr $x-$X] [expr $y-$Y]; set X $x; set Y $y
}

# Nudge active mark
proc nudge {c dx dy} {
	if {[$c find withtag active] == ""} {
		return
	}
	
	$c move active $dx $dy
}




bind $c <3> "dump stdout $c"

# Send tagged curve data to a channel
proc dump {fp c} {
	foreach t [$c find withtag X] {
		puts $fp [concat [lindex [$c gettags $t] 0] [lrange [$c coords $t] 0 1]]
	}
}

# Save tagged curve data to a file
proc save_raw {c} {
	global device
	
	set f [tk_getSaveFile -initialfile "$device.crv"]
	dump [open $f a] $c
}


set b .buttons; frame $b
button .buttons.dismiss -text Dismiss -command {destroy .}
button .buttons.save -text "Save Data" -command {save_raw $c}
pack .buttons.save .buttons.dismiss -side left -expand 1
pack $b -side bottom -fill x -pady 2m

